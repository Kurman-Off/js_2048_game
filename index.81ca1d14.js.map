{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\nvar score = [];\nvar gameOver = false;\nfunction getRows() {\n    var rows = document.querySelectorAll(\".field-row\");\n    var matrix = [];\n    rows.forEach(function(row) {\n        var cells = row.querySelectorAll(\".field-cell\");\n        var rowArray = [];\n        cells.forEach(function(cell) {\n            rowArray.push(cell.textContent);\n        });\n        matrix.push(rowArray);\n    });\n    return matrix;\n}\nfunction transposeMatrix(matrix) {\n    return matrix[0].map(function(_, colIndex) {\n        return matrix.map(function(row) {\n            return row[colIndex];\n        });\n    });\n}\nfunction randomNumbers() {\n    return Math.random() < 0.1 ? 4 : 2;\n}\nfunction addRandomNumberToRow(matrix) {\n    var emptyCells = [];\n    matrix.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, colIndex) {\n            if (cell === \"\") emptyCells.push({\n                rowIndex: rowIndex,\n                colIndex: colIndex\n            });\n        });\n    });\n    if (emptyCells.length > 0) {\n        var randomIndex = Math.floor(Math.random() * emptyCells.length);\n        var _emptyCells_randomIndex = emptyCells[randomIndex], rowIndex = _emptyCells_randomIndex.rowIndex, colIndex = _emptyCells_randomIndex.colIndex;\n        matrix[rowIndex][colIndex] = randomNumbers();\n        var cellToFill = document.querySelectorAll(\".field-row\")[rowIndex].querySelectorAll(\".field-cell\")[colIndex];\n        cellToFill.textContent = matrix[rowIndex][colIndex];\n    }\n}\nfunction statusButton() {\n    var startBtn = document.querySelector(\".start\");\n    var startNotification = document.querySelector(\".message-start\");\n    var winNotification = document.querySelector(\".message-win\");\n    var loseNotification = document.querySelector(\".message-lose\");\n    var stat = false;\n    var clickHandler = function() {\n        stat = !stat;\n        if (stat) {\n            var matrix = getRows();\n            startBtn.textContent = \"Restart\";\n            startNotification.style.display = \"none\";\n            init();\n            handleTouchEvents();\n            addRandomNumberToRow(matrix);\n            addRandomNumberToRow(matrix);\n        } else {\n            startBtn.textContent = \"Start\";\n            startNotification.style.display = \"block\";\n            winNotification.style.display = \"none\";\n            loseNotification.style.display = \"none\";\n            gameOver = false;\n            resetMatrix();\n            resetScore();\n        }\n    };\n    startBtn.addEventListener(\"click\", clickHandler);\n}\nfunction resetMatrix() {\n    var rows = document.querySelectorAll(\".field-row\");\n    rows.forEach(function(row) {\n        row.querySelectorAll(\".field-cell\").forEach(function(cell) {\n            cell.textContent = \"\";\n        });\n    });\n}\nfunction moveRight(matrix) {\n    if (gameOver) return;\n    var newMatrix = matrix.map(function(row) {\n        var rowWithoutEmptyElements = [];\n        var newRow = [];\n        for(var i = 0; i < row.length; i++){\n            var cell = Number(row[i]); // Перетворюємо значення в число\n            if (!isNaN(cell) && cell !== 0) rowWithoutEmptyElements.push(cell);\n        }\n        rowWithoutEmptyElements.reverse();\n        for(var i1 = 0; i1 < rowWithoutEmptyElements.length; i1++)if (rowWithoutEmptyElements[i1] === rowWithoutEmptyElements[i1 + 1]) {\n            newRow.push(rowWithoutEmptyElements[i1] * 2);\n            score.push(rowWithoutEmptyElements[i1] * 2);\n            i1++;\n        } else newRow.push(rowWithoutEmptyElements[i1]);\n        newRow.reverse();\n        while(newRow.length < row.length)newRow.unshift(\"\");\n        return newRow;\n    });\n    var matrixChanged = !matrix.every(function(row, rowIndex) {\n        return row.every(function(cell, colIndex) {\n            return Number(cell) === Number(newMatrix[rowIndex][colIndex]);\n        });\n    });\n    newMatrix.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, colIndex) {\n            var cellToFill = document.querySelectorAll(\".field-row\")[rowIndex].querySelectorAll(\".field-cell\")[colIndex];\n            cellToFill.textContent = cell;\n        });\n    });\n    if (matrixChanged) addRandomNumberToRow(newMatrix);\n    var totalScore = score.reduce(function(sum, currentScore) {\n        return sum + currentScore;\n    }, 0);\n    updateScore(totalScore);\n    statusWin(newMatrix);\n    statusLose(newMatrix);\n    return newMatrix;\n}\nfunction moveLeft(matrix) {\n    if (gameOver) return;\n    var newMatrix = matrix.map(function(row) {\n        var rowWithoutEmptyElements = [];\n        var newRow = [];\n        for(var i = 0; i < row.length; i++){\n            var cell = Number(row[i]); // Перетворюємо значення в число\n            if (!isNaN(cell) && cell !== 0) rowWithoutEmptyElements.push(cell);\n        }\n        for(var i1 = 0; i1 < rowWithoutEmptyElements.length; i1++)if (rowWithoutEmptyElements[i1] === rowWithoutEmptyElements[i1 + 1]) {\n            newRow.push(rowWithoutEmptyElements[i1] * 2);\n            score.push(rowWithoutEmptyElements[i1] * 2);\n            i1++;\n        } else newRow.push(rowWithoutEmptyElements[i1]);\n        while(newRow.length < row.length)newRow.push(\"\");\n        return newRow;\n    });\n    var matrixChanged = !matrix.every(function(row, rowIndex) {\n        return row.every(function(cell, colIndex) {\n            return Number(cell) === Number(newMatrix[rowIndex][colIndex]);\n        });\n    });\n    newMatrix.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, colIndex) {\n            var cellToFill = document.querySelectorAll(\".field-row\")[rowIndex].querySelectorAll(\".field-cell\")[colIndex];\n            cellToFill.textContent = cell;\n        });\n    });\n    if (matrixChanged) addRandomNumberToRow(newMatrix);\n    var totalScore = score.reduce(function(sum, currentScore) {\n        return sum + currentScore;\n    }, 0);\n    updateScore(totalScore);\n    statusWin(newMatrix);\n    statusLose(newMatrix);\n    return newMatrix;\n}\nfunction moveUp(matrix) {\n    if (gameOver) return;\n    var newMatrix = transposeMatrix(matrix).map(function(row) {\n        var rowWithoutEmptyElements = [];\n        var newRow = [];\n        for(var i = 0; i < row.length; i++){\n            var cell = Number(row[i]); // Перетворюємо значення в число\n            if (!isNaN(cell) && cell !== 0) rowWithoutEmptyElements.push(cell);\n        }\n        for(var i1 = 0; i1 < rowWithoutEmptyElements.length; i1++)if (rowWithoutEmptyElements[i1] === rowWithoutEmptyElements[i1 + 1]) {\n            newRow.push(rowWithoutEmptyElements[i1] * 2);\n            score.push(rowWithoutEmptyElements[i1] * 2);\n            i1++;\n        } else newRow.push(rowWithoutEmptyElements[i1]);\n        while(newRow.length < row.length)newRow.push(\"\");\n        return newRow;\n    });\n    var finalMatrix = transposeMatrix(newMatrix);\n    var matrixChanged = !matrix.every(function(row, rowIndex) {\n        return row.every(function(cell, colIndex) {\n            return Number(cell) === Number(finalMatrix[rowIndex][colIndex]);\n        });\n    });\n    finalMatrix.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, colIndex) {\n            var cellToFill = document.querySelectorAll(\".field-row\")[rowIndex].querySelectorAll(\".field-cell\")[colIndex];\n            cellToFill.textContent = cell;\n        });\n    });\n    if (matrixChanged) addRandomNumberToRow(finalMatrix);\n    var totalScore = score.reduce(function(sum, currentScore) {\n        return sum + currentScore;\n    }, 0);\n    updateScore(totalScore);\n    statusWin(finalMatrix);\n    statusLose(finalMatrix);\n    return finalMatrix;\n}\nfunction moveDown(matrix) {\n    if (gameOver) return;\n    var newMatrix = transposeMatrix(matrix).map(function(row) {\n        var rowWithoutEmptyElements = [];\n        var newRow = [];\n        for(var i = 0; i < row.length; i++){\n            var cell = Number(row[i]); // Перетворюємо значення в число\n            if (!isNaN(cell) && cell !== 0) rowWithoutEmptyElements.push(cell);\n        }\n        rowWithoutEmptyElements.reverse();\n        for(var i1 = 0; i1 < rowWithoutEmptyElements.length; i1++)if (rowWithoutEmptyElements[i1] === rowWithoutEmptyElements[i1 + 1]) {\n            newRow.push(rowWithoutEmptyElements[i1] * 2);\n            score.push(rowWithoutEmptyElements[i1] * 2);\n            i1++;\n        } else newRow.push(rowWithoutEmptyElements[i1]);\n        newRow.reverse();\n        while(newRow.length < row.length)newRow.unshift(\"\");\n        return newRow;\n    });\n    var finalMatrix = transposeMatrix(newMatrix);\n    var matrixChanged = !matrix.every(function(row, rowIndex) {\n        return row.every(function(cell, colIndex) {\n            return Number(cell) === Number(finalMatrix[rowIndex][colIndex]);\n        });\n    });\n    finalMatrix.forEach(function(row, rowIndex) {\n        row.forEach(function(cell, colIndex) {\n            var cellToFill = document.querySelectorAll(\".field-row\")[rowIndex].querySelectorAll(\".field-cell\")[colIndex];\n            cellToFill.textContent = cell;\n        });\n    });\n    if (matrixChanged) addRandomNumberToRow(finalMatrix);\n    var totalScore = score.reduce(function(sum, currentScore) {\n        return sum + currentScore;\n    }, 0);\n    updateScore(totalScore);\n    statusWin(finalMatrix);\n    statusLose(finalMatrix);\n    return finalMatrix;\n}\nfunction updateScore(scores) {\n    var scoreElement = document.querySelector(\".game-score\");\n    if (scoreElement) scoreElement.textContent = scores;\n}\nfunction resetScore() {\n    score.length = 0;\n    updateScore(0);\n}\nfunction statusWin(matrix) {\n    if (matrix.some(function(row) {\n        return row.some(function(cell) {\n            return cell >= 2048;\n        });\n    })) {\n        var winNotification = document.querySelector(\".message-win\");\n        if (winNotification) {\n            winNotification.style.display = \"block\";\n            gameOver = true;\n        }\n    }\n}\nfunction statusLose(matrix) {\n    var allCellsFilled = matrix.every(function(row) {\n        return row.every(function(cell) {\n            return Number(cell) !== 0;\n        });\n    });\n    if (allCellsFilled) {\n        var canMerge = matrix.some(function(row, rowIndex) {\n            return row.some(function(cell, colIndex) {\n                var rightMerge = colIndex < row.length - 1 && Number(cell) === Number(row[colIndex + 1]);\n                var downMerge = rowIndex < matrix.length - 1 && Number(cell) === Number(matrix[rowIndex + 1][colIndex]);\n                return rightMerge || downMerge;\n            });\n        });\n        if (!canMerge) {\n            var loseNotification = document.querySelector(\".message-lose\");\n            if (loseNotification) {\n                loseNotification.style.display = \"block\";\n                gameOver = true;\n            }\n        }\n    }\n}\nfunction init() {\n    var moveFunctions = {\n        ArrowRight: moveRight,\n        ArrowLeft: moveLeft,\n        ArrowUp: moveUp,\n        ArrowDown: moveDown\n    };\n    document.addEventListener(\"keydown\", function(e) {\n        if (gameOver) return;\n        var matrix = getRows();\n        var moveFunction = moveFunctions[e.key];\n        if (moveFunction) moveFunction(matrix);\n    });\n}\nfunction handleTouchEvents() {\n    var touchStartX = 0;\n    var touchStartY = 0;\n    var touchEndX = 0;\n    var touchEndY = 0;\n    document.addEventListener(\"touchstart\", function(e) {\n        touchStartX = e.changedTouches[0].screenX;\n        touchStartY = e.changedTouches[0].screenY;\n    });\n    document.addEventListener(\"touchmove\", function(e) {\n        touchEndX = e.changedTouches[0].screenX;\n        touchEndY = e.changedTouches[0].screenY;\n    });\n    document.addEventListener(\"touchend\", function() {\n        handleGesture();\n    });\n    function handleGesture() {\n        var diffX = touchEndX - touchStartX;\n        var diffY = touchEndY - touchStartY;\n        if (Math.abs(diffX) > Math.abs(diffY)) {\n            if (diffX > 0) moveRight(getRows());\n            else moveLeft(getRows());\n        } else if (diffY > 0) moveDown(getRows());\n        else moveUp(getRows());\n    }\n}\nstatusButton();\n\n//# sourceMappingURL=index.81ca1d14.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\n// const Game = require('../modules/Game.class');\n// const game = new Game();\nconst score = [];\nlet gameOver = false;\n\nfunction getRows() {\n  const rows = document.querySelectorAll('.field-row');\n  const matrix = [];\n\n  rows.forEach((row) => {\n    const cells = row.querySelectorAll('.field-cell');\n    const rowArray = [];\n\n    cells.forEach((cell) => {\n      rowArray.push(cell.textContent);\n    });\n\n    matrix.push(rowArray);\n  });\n\n  return matrix;\n}\n\nfunction transposeMatrix(matrix) {\n  return matrix[0].map((_, colIndex) => matrix.map((row) => row[colIndex]));\n}\n\nfunction randomNumbers() {\n  return Math.random() < 0.1 ? 4 : 2;\n}\n\nfunction addRandomNumberToRow(matrix) {\n  const emptyCells = [];\n\n  matrix.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      if (cell === '') {\n        emptyCells.push({ rowIndex, colIndex });\n      }\n    });\n  });\n\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { rowIndex, colIndex } = emptyCells[randomIndex];\n\n    matrix[rowIndex][colIndex] = randomNumbers();\n\n    const cellToFill = document\n      .querySelectorAll('.field-row')\n      [rowIndex].querySelectorAll('.field-cell')[colIndex];\n\n    cellToFill.textContent = matrix[rowIndex][colIndex];\n  }\n}\n\nfunction statusButton() {\n  const startBtn = document.querySelector('.start');\n  const startNotification = document.querySelector('.message-start');\n  const winNotification = document.querySelector('.message-win');\n  const loseNotification = document.querySelector('.message-lose');\n  let stat = false;\n\n  const clickHandler = () => {\n    stat = !stat;\n\n    if (stat) {\n      const matrix = getRows();\n\n      startBtn.textContent = 'Restart';\n      startNotification.style.display = 'none';\n\n      init();\n      handleTouchEvents();\n      addRandomNumberToRow(matrix);\n      addRandomNumberToRow(matrix);\n    } else {\n      startBtn.textContent = 'Start';\n      startNotification.style.display = 'block';\n      winNotification.style.display = 'none';\n      loseNotification.style.display = 'none';\n      gameOver = false;\n      resetMatrix();\n      resetScore();\n    }\n  };\n\n  startBtn.addEventListener('click', clickHandler);\n}\n\nfunction resetMatrix() {\n  const rows = document.querySelectorAll('.field-row');\n\n  rows.forEach((row) => {\n    row.querySelectorAll('.field-cell').forEach((cell) => {\n      cell.textContent = '';\n    });\n  });\n}\n\nfunction moveRight(matrix) {\n  if (gameOver) {\n    return;\n  }\n\n  const newMatrix = matrix.map((row) => {\n    const rowWithoutEmptyElements = [];\n    const newRow = [];\n\n    for (let i = 0; i < row.length; i++) {\n      const cell = Number(row[i]); // Перетворюємо значення в число\n\n      if (!isNaN(cell) && cell !== 0) {\n        rowWithoutEmptyElements.push(cell);\n      }\n    }\n\n    rowWithoutEmptyElements.reverse();\n\n    for (let i = 0; i < rowWithoutEmptyElements.length; i++) {\n      if (rowWithoutEmptyElements[i] === rowWithoutEmptyElements[i + 1]) {\n        newRow.push(rowWithoutEmptyElements[i] * 2);\n        score.push(rowWithoutEmptyElements[i] * 2);\n        i++;\n      } else {\n        newRow.push(rowWithoutEmptyElements[i]);\n      }\n    }\n\n    newRow.reverse();\n\n    while (newRow.length < row.length) {\n      newRow.unshift('');\n    }\n\n    return newRow;\n  });\n\n  const matrixChanged = !matrix.every((row, rowIndex) => {\n    return row.every((cell, colIndex) => {\n      return Number(cell) === Number(newMatrix[rowIndex][colIndex]);\n    });\n  });\n\n  newMatrix.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const cellToFill = document\n        .querySelectorAll('.field-row')\n        [rowIndex].querySelectorAll('.field-cell')[colIndex];\n\n      cellToFill.textContent = cell;\n    });\n  });\n\n  if (matrixChanged) {\n    addRandomNumberToRow(newMatrix);\n  }\n\n  const totalScore = score.reduce((sum, currentScore) => sum + currentScore, 0);\n\n  updateScore(totalScore);\n  statusWin(newMatrix);\n  statusLose(newMatrix);\n\n  return newMatrix;\n}\n\nfunction moveLeft(matrix) {\n  if (gameOver) {\n    return;\n  }\n\n  const newMatrix = matrix.map((row) => {\n    const rowWithoutEmptyElements = [];\n    const newRow = [];\n\n    for (let i = 0; i < row.length; i++) {\n      const cell = Number(row[i]); // Перетворюємо значення в число\n\n      if (!isNaN(cell) && cell !== 0) {\n        rowWithoutEmptyElements.push(cell);\n      }\n    }\n\n    for (let i = 0; i < rowWithoutEmptyElements.length; i++) {\n      if (rowWithoutEmptyElements[i] === rowWithoutEmptyElements[i + 1]) {\n        newRow.push(rowWithoutEmptyElements[i] * 2);\n        score.push(rowWithoutEmptyElements[i] * 2);\n        i++;\n      } else {\n        newRow.push(rowWithoutEmptyElements[i]);\n      }\n    }\n\n    while (newRow.length < row.length) {\n      newRow.push('');\n    }\n\n    return newRow;\n  });\n\n  const matrixChanged = !matrix.every((row, rowIndex) => {\n    return row.every((cell, colIndex) => {\n      return Number(cell) === Number(newMatrix[rowIndex][colIndex]);\n    });\n  });\n\n  newMatrix.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const cellToFill = document\n        .querySelectorAll('.field-row')\n        [rowIndex].querySelectorAll('.field-cell')[colIndex];\n\n      cellToFill.textContent = cell;\n    });\n  });\n\n  if (matrixChanged) {\n    addRandomNumberToRow(newMatrix);\n  }\n\n  const totalScore = score.reduce((sum, currentScore) => sum + currentScore, 0);\n\n  updateScore(totalScore);\n  statusWin(newMatrix);\n  statusLose(newMatrix);\n\n  return newMatrix;\n}\n\nfunction moveUp(matrix) {\n  if (gameOver) {\n    return;\n  }\n\n  const newMatrix = transposeMatrix(matrix).map((row) => {\n    const rowWithoutEmptyElements = [];\n    const newRow = [];\n\n    for (let i = 0; i < row.length; i++) {\n      const cell = Number(row[i]); // Перетворюємо значення в число\n\n      if (!isNaN(cell) && cell !== 0) {\n        rowWithoutEmptyElements.push(cell);\n      }\n    }\n\n    for (let i = 0; i < rowWithoutEmptyElements.length; i++) {\n      if (rowWithoutEmptyElements[i] === rowWithoutEmptyElements[i + 1]) {\n        newRow.push(rowWithoutEmptyElements[i] * 2);\n        score.push(rowWithoutEmptyElements[i] * 2);\n        i++;\n      } else {\n        newRow.push(rowWithoutEmptyElements[i]);\n      }\n    }\n\n    while (newRow.length < row.length) {\n      newRow.push('');\n    }\n\n    return newRow;\n  });\n\n  const finalMatrix = transposeMatrix(newMatrix);\n\n  const matrixChanged = !matrix.every((row, rowIndex) => {\n    return row.every((cell, colIndex) => {\n      return Number(cell) === Number(finalMatrix[rowIndex][colIndex]);\n    });\n  });\n\n  finalMatrix.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const cellToFill = document\n        .querySelectorAll('.field-row')\n        [rowIndex].querySelectorAll('.field-cell')[colIndex];\n\n      cellToFill.textContent = cell;\n    });\n  });\n\n  if (matrixChanged) {\n    addRandomNumberToRow(finalMatrix);\n  }\n\n  const totalScore = score.reduce((sum, currentScore) => sum + currentScore, 0);\n\n  updateScore(totalScore);\n  statusWin(finalMatrix);\n  statusLose(finalMatrix);\n\n  return finalMatrix;\n}\n\nfunction moveDown(matrix) {\n  if (gameOver) {\n    return;\n  }\n\n  const newMatrix = transposeMatrix(matrix).map((row) => {\n    const rowWithoutEmptyElements = [];\n    const newRow = [];\n\n    for (let i = 0; i < row.length; i++) {\n      const cell = Number(row[i]); // Перетворюємо значення в число\n\n      if (!isNaN(cell) && cell !== 0) {\n        rowWithoutEmptyElements.push(cell);\n      }\n    }\n\n    rowWithoutEmptyElements.reverse();\n\n    for (let i = 0; i < rowWithoutEmptyElements.length; i++) {\n      if (rowWithoutEmptyElements[i] === rowWithoutEmptyElements[i + 1]) {\n        newRow.push(rowWithoutEmptyElements[i] * 2);\n        score.push(rowWithoutEmptyElements[i] * 2);\n        i++;\n      } else {\n        newRow.push(rowWithoutEmptyElements[i]);\n      }\n    }\n\n    newRow.reverse();\n\n    while (newRow.length < row.length) {\n      newRow.unshift('');\n    }\n\n    return newRow;\n  });\n\n  const finalMatrix = transposeMatrix(newMatrix);\n\n  const matrixChanged = !matrix.every((row, rowIndex) => {\n    return row.every((cell, colIndex) => {\n      return Number(cell) === Number(finalMatrix[rowIndex][colIndex]);\n    });\n  });\n\n  finalMatrix.forEach((row, rowIndex) => {\n    row.forEach((cell, colIndex) => {\n      const cellToFill = document\n        .querySelectorAll('.field-row')\n        [rowIndex].querySelectorAll('.field-cell')[colIndex];\n\n      cellToFill.textContent = cell;\n    });\n  });\n\n  if (matrixChanged) {\n    addRandomNumberToRow(finalMatrix);\n  }\n\n  const totalScore = score.reduce((sum, currentScore) => sum + currentScore, 0);\n\n  updateScore(totalScore);\n  statusWin(finalMatrix);\n  statusLose(finalMatrix);\n\n  return finalMatrix;\n}\n\nfunction updateScore(scores) {\n  const scoreElement = document.querySelector('.game-score');\n\n  if (scoreElement) {\n    scoreElement.textContent = scores;\n  }\n}\n\nfunction resetScore() {\n  score.length = 0;\n  updateScore(0);\n}\n\nfunction statusWin(matrix) {\n  if (matrix.some((row) => row.some((cell) => cell >= 2048))) {\n    const winNotification = document.querySelector('.message-win');\n\n    if (winNotification) {\n      winNotification.style.display = 'block';\n      gameOver = true;\n    }\n  }\n}\n\nfunction statusLose(matrix) {\n  const allCellsFilled = matrix.every((row) => {\n    return row.every((cell) => {\n      return Number(cell) !== 0;\n    });\n  });\n\n  if (allCellsFilled) {\n    const canMerge = matrix.some((row, rowIndex) => {\n      return row.some((cell, colIndex) => {\n        const rightMerge =\n          colIndex < row.length - 1 &&\n          Number(cell) === Number(row[colIndex + 1]);\n        const downMerge =\n          rowIndex < matrix.length - 1 &&\n          Number(cell) === Number(matrix[rowIndex + 1][colIndex]);\n\n        return rightMerge || downMerge;\n      });\n    });\n\n    if (!canMerge) {\n      const loseNotification = document.querySelector('.message-lose');\n\n      if (loseNotification) {\n        loseNotification.style.display = 'block';\n        gameOver = true;\n      }\n    }\n  }\n}\n\nfunction init() {\n  const moveFunctions = {\n    ArrowRight: moveRight,\n    ArrowLeft: moveLeft,\n    ArrowUp: moveUp,\n    ArrowDown: moveDown,\n  };\n\n  document.addEventListener('keydown', (e) => {\n    if (gameOver) {\n      return;\n    }\n\n    const matrix = getRows();\n    const moveFunction = moveFunctions[e.key];\n\n    if (moveFunction) {\n      moveFunction(matrix);\n    }\n  });\n}\n\nfunction handleTouchEvents() {\n  let touchStartX = 0;\n  let touchStartY = 0;\n  let touchEndX = 0;\n  let touchEndY = 0;\n\n  document.addEventListener('touchstart', function (e) {\n    touchStartX = e.changedTouches[0].screenX;\n    touchStartY = e.changedTouches[0].screenY;\n  });\n\n  document.addEventListener('touchmove', function (e) {\n    touchEndX = e.changedTouches[0].screenX;\n    touchEndY = e.changedTouches[0].screenY;\n  });\n\n  document.addEventListener('touchend', function () {\n    handleGesture();\n  });\n\n  function handleGesture() {\n    const diffX = touchEndX - touchStartX;\n    const diffY = touchEndY - touchStartY;\n\n    if (Math.abs(diffX) > Math.abs(diffY)) {\n      if (diffX > 0) {\n        moveRight(getRows());\n      } else {\n        moveLeft(getRows());\n      }\n    } else {\n      if (diffY > 0) {\n        moveDown(getRows());\n      } else {\n        moveUp(getRows());\n      }\n    }\n  }\n}\nstatusButton();\n"],"names":["startBtn","startNotification","winNotification","loseNotification","stat","score","gameOver","getRows","rows","document","querySelectorAll","matrix","forEach","row","cells","rowArray","cell","push","textContent","transposeMatrix","map","_","colIndex","addRandomNumberToRow","emptyCells","rowIndex","length","randomIndex","Math","floor","random","_emptyCells_randomIndex","cellToFill","moveRight","newMatrix","rowWithoutEmptyElements","newRow","i","Number","isNaN","reverse","i1","unshift","matrixChanged","every","updateScore","reduce","sum","currentScore","statusWin","statusLose","moveLeft","moveUp","finalMatrix","moveDown","scores","scoreElement","querySelector","some","style","display","allCellsFilled","rightMerge","downMerge","addEventListener","moveFunctions","touchStartX","touchStartY","touchEndX","touchEndY","ArrowRight","ArrowLeft","ArrowUp","ArrowDown","e","moveFunction","key","changedTouches","screenX","screenY","diffX","diffY","abs"],"version":3,"file":"index.81ca1d14.js.map"}